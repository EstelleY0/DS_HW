
"""
2-1. (10 points) 다음 슬라이드의 코드를 참고하여 array (Python list) 기반의 stack을 구현하고
임의의 샘플 데이터에 대해 각 연산이 동작한다는 것을 캡처화면으로 보이시오.
"""
def push(item):
    stack.append(item)
    
def peek():
    if len(stack) != 0:
        return stack[-1]

def pop():
    if len(stack) != 0:
        item = stack.pop(-1)
        return item
    
    
# Declaration of stack
stack = []

# Push
push('first')
push('second')
push('third')
print('after push: |t', end='')
print(stack, '|t<-top')
print('top: ', end='')

# Peek
print(peek())

# Push
push('fourth')
print('after push: |t', end='')
print(stack, '|t<-top')

# Pop
pop()
print('after pop: |t', end='')
print(stack, '|t<- top')
pop()
print('after pop: |t', end='')
print(stack, '|t<- top')


"""
2-2. (10 points) 다음 슬라이드의 코드를 참고하여 linked list 기반의 stack을 구현하고
임의의 샘플 데이터에 대해 각 연산이 동작한다는 것을 캡처화면으로 보이시오.
"""
class Node:
    #initiate
    def __init__(self, item, link):
        self.item = item
        self.next = link

def push(item):
    global top
    global size
    #update top
    top = Node(item, top)
    size += 1
    
def peek():
    if size != 0:
        return top.item
    #empty case
    return None

def pop():
    global top
    global size
    if size != 0:
        top_item = top.item
        #delete
        top = top.next
        size -= 1
        return top_item
    #empty case
    return None

def print_stack():
    print('top->\t', end='')
    #start from top
    p = top
    #while p is not None type
    while p:
        if p.next != None:
            print(p.item, '-> ', end='')
        else:
            print(p.item)
        p = p.next
    
# Declaration of stack
top = None
size = 0

# Push
push('first')
push('second')
push('third')
print('after push: ', end='')
print_stack()
print('top: ', end='')

# Peek
print(peek())

# Push
push('fourth')
print('after push: ', end='')
print_stack()

# Pop
pop()
print('after pop: ', end='')
print_stack()
pop()
print('after pop: ', end='')
print_stack()

